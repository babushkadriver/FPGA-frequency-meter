module zadanie(clk, led0, led1, input_clk, segments, segments_bit);

	input wire clk, input_clk;
	output wire led0, led1;
	output reg [7:0]segments;
	output reg [7:0]segments_bit;
	reg led;
	reg [1:0]discharge_flag;
	reg [3:0]code;
	reg [3:0]code1;
	reg [3:0]code2;
	reg [3:0]code3;
	
	initial segments <= 8'b00000111;
	initial segments_bit <= 8'b11111110;
	initial led <= 1'b0;
	initial code <= 4'd0;
	initial code1 <= 4'd0;
	initial code2 <= 4'd0;
	initial code3 <= 4'd0;
	initial discharge_flag <= 2'd0;
	
	reg [25:0] counter;
	reg [17:0] counter_tic;
	reg [26:0] counter_input_clk;
	reg [26:0] input_frequency;
	reg [26:0] counter_seconds;
	initial counter <= 26'd0;
	initial counter_seconds <= 26'd0;
	initial counter_input_clk <= 27'd0;
	initial input_frequency <= 27'd0;

	always @(posedge input_clk)
		begin
			counter_input_clk <= counter_input_clk + 1'b1;
		end
	
	always @(posedge clk)
	begin
	
		if(counter_tic == 18'd62500) begin
			segments_bit <= 8'b11111110;
			discharge_flag = 2'b00;
		end
		if(counter_tic == 18'd125000) begin
			segments_bit <= 8'b11111101;
			discharge_flag = 2'b01;
		end
		if(counter_tic == 18'd187500) begin
			segments_bit <= 8'b11111011;
			discharge_flag = 2'b10;
		end
		if(counter_tic == 18'd250000) begin
			segments_bit <= 8'b11110111;
			discharge_flag = 2'b11;
			counter_tic <= 18'd0;
		end
			counter_tic <= counter_tic + 1'b1;
		
		if(counter == 26'd50000000) 
		begin
			input_frequency <= counter_input_clk * 2;
			counter_input_clk <= 0;
			counter <= 26'd0;
			counter_seconds <= counter_seconds + 1'b1;
			led <= ~led;
			if(code < 4'd9) begin
				code <= code + 1'b1;
			end
			else begin
				code <= 1'b0;
				if(code1 < 4'd9) begin
					code1 <= code1 + 1'b1;
				end
				else begin
					code1 <= 1'b0;
					if(code2 < 4'd9) begin
						code2 <= code2 + 1'b1;
					end
					else begin
						code2 <= 1'b0;
						if(code3 < 4'd9) begin
							code3 <= code3 + 1'b1;
						end
						else begin
							code3 <= 1'b0;
						end
					end
				end
			end
		end
		else 
		begin
			counter <= counter + 1'b1;
		end
	end

	assign led0 = led;
	assign led1 = ~led;
	

	
	/*always @*
	begin
		case(code)
		4'd0: begin segments = 8'b00000011; segments_bit = 8'b01111111; end
		4'd1: begin segments = 8'b10011111; segments_bit = 8'b10111111; end
		4'd2: begin segments = 8'b00100101; segments_bit = 8'b11011111; end
		4'd3: begin segments = 8'b00001101; segments_bit = 8'b11101111; end
		4'd4: begin segments = 8'b10011001; segments_bit = 8'b11110111; end
		4'd5: begin segments = 8'b01001001; segments_bit = 8'b11111011; end
		4'd6: begin segments = 8'b01000001; segments_bit = 8'b11111101; end
		4'd7: begin segments = 8'b00011111; segments_bit = 8'b11111110; end
		4'd8: begin segments = 8'b00000001; segments_bit = 8'b01111111; end
		4'd9: begin segments = 8'b00001001; segments_bit = 8'b10111111; end
		4'd10: begin segments = 8'b00010001; segments_bit = 8'b11011111; end
		4'd11: begin segments = 8'b11000001; segments_bit = 8'b11101111; end
		4'd12: begin segments = 8'b01100011; segments_bit = 8'b11110111; end
		4'd13: begin segments = 8'b10000101; segments_bit = 8'b11111011; end
		4'd14: begin segments = 8'b00100001; segments_bit = 8'b11111101; end
		4'd15: begin segments = 8'b01110001; segments_bit = 8'b11111110; end
		endcase
	end*/
	
	always @*
	begin
		if(discharge_flag == 2'b00) begin
		case(code)
		4'd0: begin segments = 8'b00000011; end
		4'd1: begin segments = 8'b10011111; end
		4'd2: begin segments = 8'b00100101; end
		4'd3: begin segments = 8'b00001101; end
		4'd4: begin segments = 8'b10011001; end
		4'd5: begin segments = 8'b01001001; end
		4'd6: begin segments = 8'b01000001; end
		4'd7: begin segments = 8'b00011111; end
		4'd8: begin segments = 8'b00000001; end
		4'd9: begin segments = 8'b00001001; end
		4'd10: begin segments = 8'b00010001; end
		4'd11: begin segments = 8'b11000001; end
		4'd12: begin segments = 8'b01100011; end
		4'd13: begin segments = 8'b10000101; end
		4'd14: begin segments = 8'b00100001; end
		4'd15: begin segments = 8'b01110001; end
		endcase
		end
		
		if(discharge_flag == 2'b01) begin
		case(code1)
		4'd0: begin segments = 8'b00000011; end
		4'd1: begin segments = 8'b10011111; end
		4'd2: begin segments = 8'b00100101; end
		4'd3: begin segments = 8'b00001101; end
		4'd4: begin segments = 8'b10011001; end
		4'd5: begin segments = 8'b01001001; end
		4'd6: begin segments = 8'b01000001; end
		4'd7: begin segments = 8'b00011111; end
		4'd8: begin segments = 8'b00000001; end
		4'd9: begin segments = 8'b00001001; end
		4'd10: begin segments = 8'b00010001; end
		4'd11: begin segments = 8'b11000001; end
		4'd12: begin segments = 8'b01100011; end
		4'd13: begin segments = 8'b10000101; end
		4'd14: begin segments = 8'b00100001; end
		4'd15: begin segments = 8'b01110001; end
		endcase
		end

		if(discharge_flag == 2'b10) begin
		case(code2)
		4'd0: begin segments = 8'b00000011; end
		4'd1: begin segments = 8'b10011111; end
		4'd2: begin segments = 8'b00100101; end
		4'd3: begin segments = 8'b00001101; end
		4'd4: begin segments = 8'b10011001; end
		4'd5: begin segments = 8'b01001001; end
		4'd6: begin segments = 8'b01000001; end
		4'd7: begin segments = 8'b00011111; end
		4'd8: begin segments = 8'b00000001; end
		4'd9: begin segments = 8'b00001001; end
		4'd10: begin segments = 8'b00010001; end
		4'd11: begin segments = 8'b11000001; end
		4'd12: begin segments = 8'b01100011; end
		4'd13: begin segments = 8'b10000101; end
		4'd14: begin segments = 8'b00100001; end
		4'd15: begin segments = 8'b01110001; end
		endcase
		end
		
		if(discharge_flag == 2'b11) begin
		case(code3)
		4'd0: begin segments = 8'b00000011; end
		4'd1: begin segments = 8'b10011111; end
		4'd2: begin segments = 8'b00100101; end
		4'd3: begin segments = 8'b00001101; end
		4'd4: begin segments = 8'b10011001; end
		4'd5: begin segments = 8'b01001001; end
		4'd6: begin segments = 8'b01000001; end
		4'd7: begin segments = 8'b00011111; end
		4'd8: begin segments = 8'b00000001; end
		4'd9: begin segments = 8'b00001001; end
		4'd10: begin segments = 8'b00010001; end
		4'd11: begin segments = 8'b11000001; end
		4'd12: begin segments = 8'b01100011; end
		4'd13: begin segments = 8'b10000101; end
		4'd14: begin segments = 8'b00100001; end
		4'd15: begin segments = 8'b01110001; end
		endcase
		end

	end
	
	
	endmodule

		
		
		
		
		
		
		
		